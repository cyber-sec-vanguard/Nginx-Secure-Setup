events {

}



http {
	disable_symlinks off;
	include /etc/nginx/sites-enabled/crl;
    	include /etc/nginx/mime.types;
	# I have another conf file with another server for a subdomain that's dedicated for the CRL. 
	# It technically work but I think it can be optimized.
	# It is not of much importance. You can think this further if you're setting a real website. I am but
	# experementing.
	server {
		listen 443 ssl http2 default_server;
		listen [::]:443 ipv6only=on http2 default_server; 

		server_name qsecurity.com;
		root /srv/nginx-handbook-projects/static-demo/;
				
		ssl_session_timeout  1d; # Recommended by Mozilla
		ssl_session_tickets off; # Recommended by Mozilla
		ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions. Recommended by Mozilla
		
		ssl_protocols TLSv1.3 TLSv1.2; # `TLSv1.3` is enough to set the ciphers to the 
			# three modern ciphers.
			# These three ciphers might lock off many, many users. So I added TLSv1.2 and the
			# intermediate set from Mozilla.
		ssl_prefer_server_ciphers off; # Recommended by Mozilla
		
		ssl_dhparam "/etc/nginx/pki/pkix/QSecurity/private/dhparam"; # DH parameters for DHE. 
			# Recommended by Mozilla. They are 2048 bits. I would rather have a 4096 for maximum
			# security but I am no better than Mozilla's security team.

		ssl_certificate "/etc/nginx/pki/pkix/QSecurity/certs/qsecurity2.pem"; # Cert for ECDSA key.
			# The name is because I created a certificate signed with SHA3-256, but openssl 
			# considered it to be too weak of an Message Digest. So I created a second certificate.
		ssl_certificate_key "/etc/nginx/pki/pkix/QSecurity/private/qsecurity.pem"; # Kpriv for 
			# ECDSA key.
		ssl_certificate "/etc/nginx/pki/pkix/QSecurity/certs/rsaqsecurity.pem"; # Cert for RSA key.
		ssl_certificate_key "/etc/nginx/pki/pkix/QSecurity/private/rsaqsecurity.pem"; # Kpriv for RSA 
			# key
		
		# As for the two keys, they are encrypted using AES256, and the passphrase is stored in
			# a file, and the file should be accessed by NGINX only. Store the file safely. 
			# Consider the following: create the passphrase file. Store it safely, in an unusal 
			# location, and use access controls. Create a bait passphrase file and use a Honeypot 
			# to trap intruders. I will do this in the future.
		ssl_password_file "/etc/nginx/pki/pkix/QSecurity/private/passphrase"; # The second passphrase 
			# is in the second line
		
		ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;	

		# HSTS (ngx_http_headers_module is required) (63072000 seconds)
		add_header Strict-Transport-Security "max-age=63072000" always; # Recommended by Mozilla
		
		# OCSP stapling # Recommended by Mozilla. I use a CRL, not an OCSP.
		#ssl_stapling on;
		#ssl_stapling_verify on;
	
		# verify chain of trust of OCSP response using Root CA and Intermediate certs
		#ssl_trusted_certificate /etc/nginx/pki/pkix/QSecurity/certs/ca.pem;
			# Recommended by Mozilla

		# Further compliance with Mozilla's modern recommendation
		ssl_ecdh_curve P-256:P-384:X25519; # This `code` was not stated in their website. But they recoomended the usage of these curves for EDCHE.
        }

	
	#server {
	#	listen 8443 ssl http2 default_server;        
	#	listen [::]:8443 ipv6only=on http2 default_server; # [::](ipv6) == 0.0.0.0(ipv4)
	#	server_name crl.qsecurity.com;
                
	#	root /srv/nginx-handbook-projects/crl/;
		#-----------------------------------Security Settings-----------------------------------
	#	ssl_protocols TLSv1.3 TLSv1.2;        
		
	#	ssl_session_timeout  1d;
	#	ssl_session_tickets off; 
	#	ssl_session_cache shared:MozSSL:10m;
		
	#	ssl_protocols TLSv1.3 TLSv1.2;
	#	ssl_prefer_server_ciphers off;
		
	#	ssl_dhparam "/etc/nginx/pki/pkix/QSecurity/private/dhparam";

	#	ssl_certificate "/etc/nginx/pki/pkix/QSecurity/certs/qsecurity2.pem";
	#	ssl_certificate_key "/etc/nginx/pki/pkix/QSecurity/private/qsecurity.pem"; 
	#	ssl_certificate "/etc/nginx/pki/pkix/QSecurity/certs/rsaqsecurity.pem";
	#	ssl_certificate_key "/etc/nginx/pki/pkix/QSecurity/private/rsaqsecurity.pem";
	#	ssl_password_file "/etc/nginx/pki/pkix/QSecurity/private/passphrase";
		
	#	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;	

	
	#	add_header Strict-Transport-Security "max-age=63072000" always; 
		
	#	ssl_ecdh_curve P-256:P-384:X25519;
			
		#-----------------------------------Other Settings-----------------------------------
		
	#}
}
